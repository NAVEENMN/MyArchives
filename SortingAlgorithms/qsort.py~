from random import randint
#------ Insertion sort() ----------------------------->
def insertionsort(I):
	#print "------ The list after insertion sort------->"
	start_time = time.time()
	for x in range(1, len(I)):
		value = I[x]
		y = x
		while (y > 0) and (I[y-1] > value):
			I[y] = I[y-1]
			y = y -1
		I[y] = value
	return I
		
#------ Insertion sort()~ ---------------------------->
#------ Modified Quick sort()---------------------------------->
def quick_sort(listq):
    pivot = MedianOfThree(list(listq), 0, len(list(listq))-1)
    if len(listq) == 0:
        return []
    if len(listq) <=10:
    	return insertionsort(listq)

    return  quick_sort(filter( lambda item: item < listq[pivot],listq)) + [v for v in listq if v==listq[pivot] ]  +  quick_sort( filter( lambda item: item > listq[pivot], listq))

def MedianOfThree(arr, left, right):
    
    if len(arr) <= 2:
    	return 0
    if len(arr) >= 3:
    	mid = (left + right)/2
    	if arr[right] < arr[left]:
		Swap(arr, left, right)        
	if arr[mid] < arr[left]:
		Swap(arr, mid, left)
	if arr[right] < arr[mid]:
		Swap(arr, right, mid)
    	return mid

# Generic Swap for manipulating list data.
def Swap(arr, left, right):
    temp = arr[left]
    arr[left] = arr[right]
    arr[right] = temp

#------- Quick sort()~-------------------------------->
def main():
	data = []
	for i in range(0,20):
			data.append(randint(0,100))
	print data
	q = quick_sort(list(data))
	print q
	data.sort()
	print data
if __name__ == "__main__":
    main()
